@page "/Delays"
@using BlazorDAL.Models;
@using BlazorUI.Api;
@using BlazorUI.Components.Delay;
@using Microsoft.AspNetCore.Components.WebAssembly.Services;
@inject DialogService dialogService;
@attribute [Authorize]
<PageTitle>Duruşlar</PageTitle>
<RadzenCard style="display: flex; align-items: center; gap: 0.5rem;background-color:#c6c3c6;">
    <div class="m-auto">
        <RadzenCard class="mx-auto " style="display: flex; text-align:end; align-items:end; gap: 0.6rem;background-color:#c6c3c6;">
            <div class="container">
                <div class="row float-end">
                    <div class="col-6">
                        <RadzenButton Text="Ekle" Style="border-radius:20px;" ButtonStyle="ButtonStyle.Success" Click="@(()=>OpenDelayDlg(null,"create"))" Icon="add_circle_outline"></RadzenButton>
                    </div>
                    <div class="col-6">
                        <RadzenButton Text="Yenile" Style="border-radius:20px;" ButtonStyle="ButtonStyle.Primary" Click="@(()=>GetAll())" Icon="refresh"></RadzenButton>

                    </div>
                </div>
            </div>
        </RadzenCard>
        <RadzenDataGrid @ref="radzenDataGrid"
                        FilterText="Ara..."
                        AllowFiltering="true"                   
                        AllowAlternatingRows="false"
                        FilterMode="FilterMode.Simple"
                        AllowSorting="true"
                        Filter="@OnFilter"
                        AllowPaging="true"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        Data="@delays"
                        TItem="DelayDto"
                        class="tp-datatable tp-table-fixed"
                        Style="background-color:#c6c3c6; --rz-cell-filter-width:10px"
                        GridLines="DataGridGridLines.Both"
                        SelectionMode="DataGridSelectionMode.Single"
                        Density="Density.Compact"
                        RowRender="@RowRender"
                        >
            <Columns>

                <RadzenDataGridColumn TItem="DelayDto" Filterable Property="ID" Title="Duruş Numarası" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="DELAY_GROUP_NAME" Title="Grup" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="DELAY_REASON_NAME" Title="Nedeni" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="DELAY_CLASS_NAME" Title="Sınıfı" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="REMARK" Title="Açıklaması" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="CREW" Title="Görev" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="SHIFT_ID" Title="Vardiya" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="BEGIN_TIME" Title="Başlama Tarihi" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="END_TIME" Title="Bitiş Tarihi" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="DURATION" Title="Süresi" Width="50px" />
                <RadzenDataGridColumn TItem="DelayDto" Property="ID" Title="İşlemler" Width="50px">
                    <Template Context="data">
                        <RadzenButton ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="pageview" class="h-25 m-1" Click="@(()=>OpenDelayDlg(data.ID,"update"))" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" class="h-25 m-1" Click="@(()=>DeleteCustomerOrder(data))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
            </RadzenDataGrid>
        </div>
        </RadzenCard>
        <style scoped>
           .rz-data-row{
               white-space:nowrap !important;
               max-height:50px !important;
           }
        </style>
@code {
    List<DelayDto> delays = new List<DelayDto>();
    RadzenDataGrid<DelayDto>? radzenDataGrid;
    [Inject]
    DelayApi delayApi { get; set; }
    public DelayDto lazyParams = new DelayDto { };
    protected override async Task OnInitializedAsync()
    {
        await GetAll();

    }
    async Task OpenDelayDlg(int? delayId, string dlgType)
    {
        DialogOptions dialogOptions = new DialogOptions
            {
                Width = "1000px",
                Height = "230px",
                Style="overflow: hidden; padding:0px;",
                ShowTitle = true,
            };

        Dictionary<string, object> dict = new Dictionary<string, object>()
        {
            {"DelayId",delayId},
            {"dlgType",dlgType}
        };
        var dialogTitle = (dlgType == "create" ? "Duruş Ekle" : (delayId + " Numaralı Duruşu Düzenle"));
        var obj = await dialogService.OpenAsync<DelayDlg>(dialogTitle, dict, dialogOptions);
        if (obj == true)
        {
            await GetAll();
        }
    }
    async Task GetAll()
    {
        delays = await delayApi.GetDelayList();
    }
    async void DeleteCustomerOrder(DelayDto delay)
    {
        var result = await dialogService
        .Confirm(delay.ID + " numaralı duruşunu silmek istiyor musunuz?", "Uyarı",
        new ConfirmOptions { OkButtonText="Evet", CancelButtonText="Hayır" });
        if (result == true)
        {
            await delayApi.DeleteDelay(delay);
            await GetAll();
        }

    }
    async void OnFilter(DataGridColumnFilterEventArgs<DelayDto> args)
    {
        lazyParams.Page = 1;
        lazyParams.First = 0;
        lazyParams.Rows = 20;
        lazyParams.TotalRecords=20;
        lazyParams.SortOrder =(int)(args.Column.SortOrder.Value);
        lazyParams.SortField = args.FilterValue.ToString();
        //await GetAll();
    }
    void RowRender(RowRenderEventArgs<DelayDto> args)
    {
        if (!string.IsNullOrEmpty(args.Data.REMARK))
        {
            args.Attributes.Add("style", $"background-color:#ACF672;");
        }
    }
}

