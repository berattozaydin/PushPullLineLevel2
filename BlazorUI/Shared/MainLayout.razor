@using BlazorDAL.Models;
@using BlazorUI.StateStore;
@using Microsoft.AspNetCore.SignalR.Client;
@inherits LayoutComponentBase
@inject StateService stateService;
<div class="page">
    <main>
        <AuthorizeView>
            <RadzenHeader class="bg-white w-auto">
                <div class="">
                    <div class="container-1">
                        <div class="row" style="height:35px;">
                            <div class="col-6 col-md-2">
                                <img src="/Image/tp-logo.png" alt="teknoplanjpg" height="30" />
                            </div>
                            <div class="col-2 col-md-8">
                                <NavMenu />
                            </div>
                            <div class="text-end col-4 col-md-2">
                                <div>
                                    <BlazorUI.Components.ActiveForeman ></BlazorUI.Components.ActiveForeman>
                                    <RadzenButton Style="height:35px; background-color:#3a8aec; text-decoration-color:white;font-size:small;" Click="()=>LogOut()" Text="Çıkış Yap"></RadzenButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </RadzenHeader>

        </AuthorizeView>
        <div class="content mt-3">
            @Body
        </div>
        <RadzenFooter Style="height:20px;">
            <p class="position-relative lh-1">@activeForeman</p>
        </RadzenFooter>

    </main>
</div>

@code {
    [Inject]
    NavigationManager NavigationManager { get; set; }
    private HubConnection hubConnection;
    private string _activeForeman;
    public string activeForeman
    {
        get { return _activeForeman; }
        set
        {
            if (value == _activeForeman) return;
            _activeForeman = value;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        string pn = "/global";
        //string navigation = NavigationManager.BaseUri + "/websocket?pagename="; //must be open for publish
        string navigation = "http://localhost:5213/websocket?pagename="; //must be empty for publish
        hubConnection = new HubConnectionBuilder()
        .WithUrl(navigation + pn)
        .WithAutomaticReconnect()
        .Build();
        await StartSignalRSocketAsync();
    }
    private async Task StartSignalRSocketAsync()
    {
        try
        {
            await hubConnection.StartAsync();
            ReceiveMessage();
        }
        catch (Exception ex)
        {
            
        }
    }
    private void ReceiveMessage()
    {
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
      {
          stateService.OnStateChange += StateHasChanged;
          stateService.SetActiveForeman(message);
      });
    }
    public void Dispose()
    {
        stateService.OnStateChange -= StateHasChanged;
    }
    async void LogOut()
    {
        NavigationManager.NavigateTo("logout");

    }
}
